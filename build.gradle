apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-plugin"
apply plugin: "maven"
apply plugin: "release"

buildscript {
	repositories {
		mavenLocal()
		maven { url "https://repo.grails.org/grails/core" }
		maven {
			url "$artifactory_contextUrl/libs-release/"
			credentials {
				username = artifactory_user
				password = artifactory_password
			}
		}
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsVersion"
		classpath group: 'gradle-release', name: 'gradle-release', version: '1.4.7'
	}
}

configurations.all {
	resolutionStrategy.cacheDynamicVersionsFor 5 * 60, 'seconds' // 5 minutos
	resolutionStrategy.cacheChangingModulesFor 5 * 60, 'seconds' // 5 minutos

	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.name == 'groovy') {
			details.useTarget group: details.requested.group, name: 'groovy-all', version: details.requested.version
		}
	}
}

uploadArchives {
	repositories.mavenDeployer {
		repository(url: "$artifactory_contextUrl/libs-release-local/") {
			authentication(userName: artifactory_user, password: artifactory_password)
		}
		snapshotRepository(url: "$artifactory_contextUrl/libs-snapshot-local/") {
			authentication(userName: artifactory_user, password: artifactory_password)
		}
	}
}

release {
	ext['gradle.release.useAutomaticVersion'] = true
}

pushFiles.dependsOn uploadArchives

repositories {
	mavenLocal()
	maven { url "https://repo.grails.org/grails/core" }
	maven {
		url "$artifactory_contextUrl/libs-release/"
		credentials {
			username = artifactory_user
			password = artifactory_password
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "org.grails:grails-bom:$grailsVersion"
	}
	dependencies {
		dependency "org.springframework.session:spring-session-data-redis:1.1.1.RELEASE"
		dependency "org.springframework.session:spring-session:1.1.1.RELEASE"
	}
	applyMavenExclusions false
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-logging:1.3.2.RELEASE"
	compile "org.springframework.boot:spring-boot-autoconfigure:1.3.2.RELEASE"
	compile "org.springframework.boot:spring-boot-starter-tomcat:1.3.2.RELEASE"

	compile "org.grails:grails-core:$grailsVersion"
	compile "org.grails:grails-dependencies:$grailsVersion"
	compile "org.grails:grails-web-boot:$grailsVersion"

	console "org.grails:grails-console:$grailsVersion"

	testCompile "org.grails.plugins:geb:1.0.1"

	testCompile('org.grails:grails-gorm-testing-support:1.0.0.BUILD-SNAPSHOT') {
		changing = true
	}

	testRuntime 'org.seleniumhq.selenium:selenium-chrome-driver:2.44.0'

	compile("org.grails.plugins:spring-session-base:1.0.4") {
		exclude module: "spring-core"
		exclude module: "spring-context"
		exclude module: "spring-context-support"
		exclude module: "spring-aop"
		exclude module: "spring-tx"
		exclude module: "spring-expression"
		exclude module: "spring-web"
		exclude module: "spring-security-core"
		exclude module: "spring-security-web"
		exclude module: "javax.servlet-api"
		exclude module: "groovy-all"
	}

	compile "org.springframework.security:spring-security-web:4.0.3.RELEASE"
}

task wrapper(type: Wrapper) {
	gradleVersion = gradleWrapperVersion
}

test {
	testLogging {
		events 'started', 'passed'
	}
}

test {
	jvmArgs '-Xverify:none'
}

artifacts {
	archives sourcesJar
}

test {
	ignoreFailures = true
}
